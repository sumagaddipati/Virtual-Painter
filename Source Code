import cv2 as cv
import numpy as np
import mediapipe as mp

# Initialize Mediapipe hand tracking
mpHands = mp.solutions.hands
hands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.8)
mpDraw = mp.solutions.drawing_utils

# Set up webcam
cap = cv.VideoCapture(0)
cap.set(3, 1280)  # Width
cap.set(4, 720)   # Height

# Variables for drawing
draw_color = (255, 0, 0)  # Default: Blue
canvas = np.zeros((720, 1280, 3), dtype=np.uint8)  # Drawing canvas
xp, yp = 0, 0  # Previous coordinates
eraser_thickness = 50  # Thickness for erasing

while True:
    success, img = cap.read()
    img = cv.flip(img, 1)  # Mirror effect
    imgRGB = cv.cvtColor(img, cv.COLOR_BGR2RGB)
    
    # Process hand detection
    result = hands.process(imgRGB)
    
    if result.multi_hand_landmarks:
        for handLms in result.multi_hand_landmarks:
            lmList = []
            
            # Extract landmarks
            for id, lm in enumerate(handLms.landmark):
                h, w, c = img.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                lmList.append((cx, cy))
            
            if lmList:
                x1, y1 = lmList[8]   # Index finger tip
                x2, y2 = lmList[12]  # Middle finger tip
                
                # Check if both index and middle fingers are up (Selection Mode)
                if y1 < lmList[6][1] and y2 < lmList[10][1]:  
                    xp, yp = 0, 0  # Reset previous position
                    
                    # Color selection (Toolbar at the top)
                    if x1 < 250:
                        draw_color = (255, 0, 0)  # Blue
                    elif 250 < x1 < 500:
                        draw_color = (0, 255, 0)  # Green
                    elif 500 < x1 < 750:
                        draw_color = (0, 0, 255)  # Red
                    elif 750 < x1 < 1000:
                        draw_color = (0, 255, 255)  # Yellow
                    elif 1000 < x1 < 1280:  # Eraser
                        draw_color = (0, 0, 0)  # Black for erasing
                    
                    cv.rectangle(img, (x1, y1 - 20), (x2, y2 + 20), draw_color, cv.FILLED)
                
                # Drawing or Erasing Mode (Only index finger is up)
                elif y1 < lmList[6][1] and y2 > lmList[10][1]:
                    if xp == 0 and yp == 0:
                        xp, yp = x1, y1
                    
                    thickness = eraser_thickness if draw_color == (0, 0, 0) else 8  # Set thickness
                    
                    cv.line(img, (xp, yp), (x1, y1), draw_color, thickness)
                    cv.line(canvas, (xp, yp), (x1, y1), draw_color, thickness)
                    xp, yp = x1, y1  # Update last point

            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)
    
    # Merge canvas with webcam feed
    img_gray = cv.cvtColor(canvas, cv.COLOR_BGR2GRAY)
    _, img_inv = cv.threshold(img_gray, 50, 255, cv.THRESH_BINARY_INV)
    img_inv = cv.cvtColor(img_inv, cv.COLOR_GRAY2BGR)
    img = cv.bitwise_and(img, img_inv)
    img = cv.bitwise_or(img, canvas)

    # Display color selection toolbar
    cv.rectangle(img, (0, 0), (250, 125), (255, 0, 0), cv.FILLED)  # Blue
    cv.rectangle(img, (250, 0), (500, 125), (0, 255, 0), cv.FILLED)  # Green
    cv.rectangle(img, (500, 0), (750, 125), (0, 0, 255), cv.FILLED)  # Red
    cv.rectangle(img, (750, 0), (1000, 125), (0, 255, 255), cv.FILLED)  # Yellow
    cv.rectangle(img, (1000, 0), (1280, 125), (0, 0, 0), cv.FILLED)  # Eraser

    # Add text labels for colors
    cv.putText(img, "Blue", (75, 75), cv.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    cv.putText(img, "Green", (300, 75), cv.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    cv.putText(img, "Red", (575, 75), cv.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    cv.putText(img, "Yellow", (800, 75), cv.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    cv.putText(img, "Eraser", (1075, 75), cv.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)  # Eraser Label

    # Show output
    cv.imshow("Virtual Painter", img)
    
    if cv.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv.destroyAllWindows()
